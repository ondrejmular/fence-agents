#!/usr/bin/env python2
'''
Replay server for SSL-encrytped raw TCP connections running over port 443.
See --help for usage.
'''

from twisted.internet import reactor, ssl
import Queue
import sys
import os
from OpenSSL import SSL
import mitmproxy


class ReplayServer(mitmproxy.ReplayServer):
    '''
    ReplayServer with implemented connect procedure
    '''
    def _terminate(self):
        print "requests left: %s" % self.requests_left
        if self.requests_left == 0:
            print "terminating..."
            mitmproxy.ReplayServer._terminate(self)


def main():
    '''
    Parse options, open and read log file, start replay server
    '''
    (opts, _) = mitmproxy.replay_option_parser(4443)

    if not os.path.exists(os.path.expanduser('~/.mitmkeys/server.key')) \
    or not os.path.exists(os.path.expanduser('~/.mitmkeys/server.crt')):
        print "Please do create server certificates (see readme)."
        sys.exit(1)

    if opts.inputfile is None:
        print "Need to specify an input file."
        sys.exit(1)
    else:
        #log = mitmproxy.Logger()
        #if opts.inputfile is not None:
        #    log.open_log(opts.inputfile, 'r')
        log_list = []
        if opts.requests > 1:
            for i in range(opts.requests):
                log = mitmproxy.Logger()
                if opts.inputfile is not None:
                    log.open_log("{0}.part{1}".format(opts.inputfile, i), 'r')
                log_list.append(log)
        else:
            log = mitmproxy.Logger()
            if opts.inputfile is not None:
                log.open_log(opts.inputfile, 'r')
            log_list.append(log)

        serverq = Queue.Queue()
        clientq = Queue.Queue()
        clientfirst = None

        mitmproxy.logreader(opts.inputfile, serverq, clientq, clientfirst)

        sys.stderr.write(
            'Server running on localhost:%d\n' % opts.localport)
        factory = mitmproxy.MultiLogReplayServerFactory(
            ReplayServer, log_list, (serverq, clientq), opts.delaymod, clientfirst)
        reactor.listenSSL(opts.localport, factory,
            ssl.DefaultOpenSSLContextFactory(
                os.path.expanduser('~/.mitmkeys/server.key'),
                os.path.expanduser('~/.mitmkeys/server.crt')))
        reactor.run()
        sys.exit(mitmproxy.exit_code.pop())


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(0)
