#!/usr/bin/env python2
'''
Replay server for SSL-encrytped raw TCP connections running over port 443.
See --help for usage.
'''

from twisted.internet import reactor, ssl
import sys
import os
import mitmproxy


def get_input_file_list(input_file):
    input_file_list = []
    if os.path.isfile(input_file):
        input_file_list.append(input_file)
    else:
        dir_name = os.path.dirname(os.path.abspath(input_file))
        basename = os.path.basename(input_file)
        file_list = [
            entity
            for entity in os.listdir(dir_name)
            if (
                entity.startswith(basename)
                and
                os.path.isfile(os.path.join(dir_name, entity))
            )
        ]
        counter = 0
        while True:
            file_name = "{0}.part{1}".format(basename, counter)
            if file_name not in file_list:
                break
            counter += 1
            input_file_list.append(os.path.join(dir_name, file_name))

        if not input_file_list:
            print "Input file '{0}' not found.".format(input_file)
            sys.exit(1)
    return input_file_list


def main():
    '''
    Parse options, open and read log file, start replay server
    '''
    (opts, _) = mitmproxy.replay_option_parser(4443)

    if not os.path.exists(os.path.expanduser('~/.mitmkeys/server.key')) \
    or not os.path.exists(os.path.expanduser('~/.mitmkeys/server.crt')):
        print "Please do create server certificates (see readme)."
        sys.exit(1)

    if opts.inputfile is None:
        print "Need to specify an input file."
        sys.exit(1)
    else:
        log = mitmproxy.Logger()
        #if opts.inputfile is not None:
        #   log.open_log(opts.inputfile, 'r')

        input_file_list = get_input_file_list(opts.inputfile)
        sys.stderr.write(
            'Server running on localhost:%d\n' % opts.localport)
        factory = mitmproxy.MultiLogReplayServerFactory(
            log, input_file_list, opts.delaymod)
        reactor.listenSSL(opts.localport, factory,
            ssl.DefaultOpenSSLContextFactory(
                os.path.expanduser('~/.mitmkeys/server.key'),
                os.path.expanduser('~/.mitmkeys/server.crt')))
        reactor.run()
        sys.exit(mitmproxy.exit_code.pop())


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(0)
